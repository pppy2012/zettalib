// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/errno.proto

#include "braft/errno.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace braft {
}  // namespace braft
namespace protobuf_braft_2ferrno_2eproto {
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "braft/errno.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021braft/errno.proto\022\005braft*\314\002\n\tRaftError"
      "\022\022\n\rERAFTTIMEDOUT\020\221N\022\022\n\rESTATEMACHINE\020\222N"
      "\022\r\n\010ECATCHUP\020\223N\022\023\n\016ELEADERREMOVED\020\224N\022\r\n\010"
      "ESETPEER\020\225N\022\022\n\rENODESHUTDOWN\020\226N\022\027\n\022EHIGH"
      "ERTERMREQUEST\020\227N\022\030\n\023EHIGHERTERMRESPONSE\020"
      "\230N\022\r\n\010EBADNODE\020\231N\022\026\n\021EVOTEFORCANDIDATE\020\232"
      "N\022\017\n\nENEWLEADER\020\233N\022\024\n\017ELEADERCONFLICT\020\234N"
      "\022\030\n\023ETRANSFERLEADERSHIP\020\235N\022\020\n\013ELOGDELETE"
      "D\020\236N\022\023\n\016ENOMOREUSERLOG\020\237N\022\016\n\tEREADONLY\020\240"
      "N"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/errno.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_braft_2ferrno_2eproto
namespace braft {
const ::google::protobuf::EnumDescriptor* RaftError_descriptor() {
  protobuf_braft_2ferrno_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_braft_2ferrno_2eproto::file_level_enum_descriptors[0];
}
bool RaftError_IsValid(int value) {
  switch (value) {
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace braft

// @@protoc_insertion_point(global_scope)
