// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/local_file_meta.proto

#include "braft/local_file_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace braft {
class LocalFileMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalFileMeta>
      _instance;
} _LocalFileMeta_default_instance_;
}  // namespace braft
namespace protobuf_braft_2flocal_5ffile_5fmeta_2eproto {
void InitDefaultsLocalFileMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_LocalFileMeta_default_instance_;
    new (ptr) ::braft::LocalFileMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::LocalFileMeta::InitAsDefaultInstance();
}

void InitDefaultsLocalFileMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocalFileMetaImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::LocalFileMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::LocalFileMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::LocalFileMeta, user_meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::LocalFileMeta, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::LocalFileMeta, checksum_),
  0,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::braft::LocalFileMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_LocalFileMeta_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "braft/local_file_meta.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033braft/local_file_meta.proto\022\005braft\"W\n\r"
      "LocalFileMeta\022\021\n\tuser_meta\030\001 \001(\014\022!\n\006sour"
      "ce\030\002 \001(\0162\021.braft.FileSource\022\020\n\010checksum\030"
      "\003 \001(\t*>\n\nFileSource\022\025\n\021FILE_SOURCE_LOCAL"
      "\020\000\022\031\n\025FILE_SOURCE_REFERENCE\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/local_file_meta.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_braft_2flocal_5ffile_5fmeta_2eproto
namespace braft {
const ::google::protobuf::EnumDescriptor* FileSource_descriptor() {
  protobuf_braft_2flocal_5ffile_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_braft_2flocal_5ffile_5fmeta_2eproto::file_level_enum_descriptors[0];
}
bool FileSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LocalFileMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalFileMeta::kUserMetaFieldNumber;
const int LocalFileMeta::kSourceFieldNumber;
const int LocalFileMeta::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalFileMeta::LocalFileMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2flocal_5ffile_5fmeta_2eproto::InitDefaultsLocalFileMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.LocalFileMeta)
}
LocalFileMeta::LocalFileMeta(const LocalFileMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_meta()) {
    user_meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_meta_);
  }
  checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_checksum()) {
    checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:braft.LocalFileMeta)
}

void LocalFileMeta::SharedCtor() {
  _cached_size_ = 0;
  user_meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = 0;
}

LocalFileMeta::~LocalFileMeta() {
  // @@protoc_insertion_point(destructor:braft.LocalFileMeta)
  SharedDtor();
}

void LocalFileMeta::SharedDtor() {
  user_meta_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocalFileMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalFileMeta::descriptor() {
  ::protobuf_braft_2flocal_5ffile_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2flocal_5ffile_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalFileMeta& LocalFileMeta::default_instance() {
  ::protobuf_braft_2flocal_5ffile_5fmeta_2eproto::InitDefaultsLocalFileMeta();
  return *internal_default_instance();
}

LocalFileMeta* LocalFileMeta::New(::google::protobuf::Arena* arena) const {
  LocalFileMeta* n = new LocalFileMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalFileMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.LocalFileMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!user_meta_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_meta_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!checksum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*checksum_.UnsafeRawStringPointer())->clear();
    }
  }
  source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalFileMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.LocalFileMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_meta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .braft.FileSource source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::braft::FileSource_IsValid(value)) {
            set_source(static_cast< ::braft::FileSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string checksum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checksum().data(), static_cast<int>(this->checksum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.LocalFileMeta.checksum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.LocalFileMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.LocalFileMeta)
  return false;
#undef DO_
}

void LocalFileMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.LocalFileMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes user_meta = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_meta(), output);
  }

  // optional .braft.FileSource source = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }

  // optional string checksum = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checksum().data(), static_cast<int>(this->checksum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.LocalFileMeta.checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checksum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.LocalFileMeta)
}

::google::protobuf::uint8* LocalFileMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.LocalFileMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes user_meta = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_meta(), target);
  }

  // optional .braft.FileSource source = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source(), target);
  }

  // optional string checksum = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checksum().data(), static_cast<int>(this->checksum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.LocalFileMeta.checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checksum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.LocalFileMeta)
  return target;
}

size_t LocalFileMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.LocalFileMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes user_meta = 1;
    if (has_user_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_meta());
    }

    // optional string checksum = 3;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksum());
    }

    // optional .braft.FileSource source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalFileMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.LocalFileMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFileMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalFileMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.LocalFileMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.LocalFileMeta)
    MergeFrom(*source);
  }
}

void LocalFileMeta::MergeFrom(const LocalFileMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.LocalFileMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_meta();
      user_meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_meta_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_checksum();
      checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_);
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalFileMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.LocalFileMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFileMeta::CopyFrom(const LocalFileMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.LocalFileMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFileMeta::IsInitialized() const {
  return true;
}

void LocalFileMeta::Swap(LocalFileMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalFileMeta::InternalSwap(LocalFileMeta* other) {
  using std::swap;
  user_meta_.Swap(&other->user_meta_);
  checksum_.Swap(&other->checksum_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalFileMeta::GetMetadata() const {
  protobuf_braft_2flocal_5ffile_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2flocal_5ffile_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace braft

// @@protoc_insertion_point(global_scope)
