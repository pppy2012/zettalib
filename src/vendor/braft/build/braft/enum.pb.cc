// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/enum.proto

#include "braft/enum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace braft {
}  // namespace braft
namespace protobuf_braft_2fenum_2eproto {
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "braft/enum.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020braft/enum.proto\022\005braft*l\n\tEntryType\022\026"
      "\n\022ENTRY_TYPE_UNKNOWN\020\000\022\024\n\020ENTRY_TYPE_NO_"
      "OP\020\001\022\023\n\017ENTRY_TYPE_DATA\020\002\022\034\n\030ENTRY_TYPE_"
      "CONFIGURATION\020\003*\202\001\n\tErrorType\022\023\n\017ERROR_T"
      "YPE_NONE\020\000\022\022\n\016ERROR_TYPE_LOG\020\001\022\025\n\021ERROR_"
      "TYPE_STABLE\020\002\022\027\n\023ERROR_TYPE_SNAPSHOT\020\003\022\034"
      "\n\030ERROR_TYPE_STATE_MACHINE\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/enum.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_braft_2fenum_2eproto
namespace braft {
const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_braft_2fenum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_braft_2fenum_2eproto::file_level_enum_descriptors[0];
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  protobuf_braft_2fenum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_braft_2fenum_2eproto::file_level_enum_descriptors[1];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace braft

// @@protoc_insertion_point(global_scope)
