// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/file_service.proto

#include "braft/file_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace braft {
class GetFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFileRequest>
      _instance;
} _GetFileRequest_default_instance_;
class GetFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFileResponse>
      _instance;
} _GetFileResponse_default_instance_;
}  // namespace braft
namespace protobuf_braft_2ffile_5fservice_2eproto {
void InitDefaultsGetFileRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_GetFileRequest_default_instance_;
    new (ptr) ::braft::GetFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::GetFileRequest::InitAsDefaultInstance();
}

void InitDefaultsGetFileRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetFileRequestImpl);
}

void InitDefaultsGetFileResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_GetFileResponse_default_instance_;
    new (ptr) ::braft::GetFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::GetFileResponse::InitAsDefaultInstance();
}

void InitDefaultsGetFileResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetFileResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileRequest, reader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileRequest, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileRequest, read_partly_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileResponse, eof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::GetFileResponse, read_size_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::braft::GetFileRequest)},
  { 15, 22, sizeof(::braft::GetFileResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_GetFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_GetFileResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "braft/file_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030braft/file_service.proto\022\005braft\"i\n\016Get"
      "FileRequest\022\021\n\treader_id\030\001 \002(\003\022\020\n\010filena"
      "me\030\002 \002(\t\022\r\n\005count\030\003 \002(\003\022\016\n\006offset\030\004 \002(\003\022"
      "\023\n\013read_partly\030\005 \001(\010\"1\n\017GetFileResponse\022"
      "\013\n\003eof\030\001 \002(\010\022\021\n\tread_size\030\002 \001(\0032H\n\013FileS"
      "ervice\0229\n\010get_file\022\025.braft.GetFileReques"
      "t\032\026.braft.GetFileResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/file_service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_braft_2ffile_5fservice_2eproto
namespace braft {

// ===================================================================

void GetFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFileRequest::kReaderIdFieldNumber;
const int GetFileRequest::kFilenameFieldNumber;
const int GetFileRequest::kCountFieldNumber;
const int GetFileRequest::kOffsetFieldNumber;
const int GetFileRequest::kReadPartlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFileRequest::GetFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2ffile_5fservice_2eproto::InitDefaultsGetFileRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.GetFileRequest)
}
GetFileRequest::GetFileRequest(const GetFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&reader_id_, &from.reader_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_partly_) -
    reinterpret_cast<char*>(&reader_id_)) + sizeof(read_partly_));
  // @@protoc_insertion_point(copy_constructor:braft.GetFileRequest)
}

void GetFileRequest::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reader_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_partly_) -
      reinterpret_cast<char*>(&reader_id_)) + sizeof(read_partly_));
}

GetFileRequest::~GetFileRequest() {
  // @@protoc_insertion_point(destructor:braft.GetFileRequest)
  SharedDtor();
}

void GetFileRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileRequest::descriptor() {
  ::protobuf_braft_2ffile_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2ffile_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFileRequest& GetFileRequest::default_instance() {
  ::protobuf_braft_2ffile_5fservice_2eproto::InitDefaultsGetFileRequest();
  return *internal_default_instance();
}

GetFileRequest* GetFileRequest::New(::google::protobuf::Arena* arena) const {
  GetFileRequest* n = new GetFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.GetFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*filename_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&reader_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&read_partly_) -
        reinterpret_cast<char*>(&reader_id_)) + sizeof(read_partly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.GetFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reader_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reader_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.GetFileRequest.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool read_partly = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_read_partly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_partly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.GetFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.GetFileRequest)
  return false;
#undef DO_
}

void GetFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.GetFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 reader_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reader_id(), output);
  }

  // required string filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.GetFileRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required int64 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  // required int64 offset = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }

  // optional bool read_partly = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->read_partly(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.GetFileRequest)
}

::google::protobuf::uint8* GetFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.GetFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 reader_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reader_id(), target);
  }

  // required string filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.GetFileRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required int64 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  // required int64 offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }

  // optional bool read_partly = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->read_partly(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.GetFileRequest)
  return target;
}

size_t GetFileRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.GetFileRequest)
  size_t total_size = 0;

  if (has_filename()) {
    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  if (has_reader_id()) {
    // required int64 reader_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reader_id());
  }

  if (has_count()) {
    // required int64 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  if (has_offset()) {
    // required int64 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  return total_size;
}
size_t GetFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.GetFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

    // required int64 reader_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reader_id());

    // required int64 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());

    // required int64 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool read_partly = 5;
  if (has_read_partly()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.GetFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.GetFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.GetFileRequest)
    MergeFrom(*source);
  }
}

void GetFileRequest::MergeFrom(const GetFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.GetFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      reader_id_ = from.reader_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      read_partly_ = from.read_partly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.GetFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileRequest::CopyFrom(const GetFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.GetFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void GetFileRequest::Swap(GetFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFileRequest::InternalSwap(GetFileRequest* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  swap(reader_id_, other->reader_id_);
  swap(count_, other->count_);
  swap(offset_, other->offset_);
  swap(read_partly_, other->read_partly_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFileRequest::GetMetadata() const {
  protobuf_braft_2ffile_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2ffile_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetFileResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFileResponse::kEofFieldNumber;
const int GetFileResponse::kReadSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFileResponse::GetFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2ffile_5fservice_2eproto::InitDefaultsGetFileResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.GetFileResponse)
}
GetFileResponse::GetFileResponse(const GetFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&read_size_, &from.read_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&eof_) -
    reinterpret_cast<char*>(&read_size_)) + sizeof(eof_));
  // @@protoc_insertion_point(copy_constructor:braft.GetFileResponse)
}

void GetFileResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&read_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eof_) -
      reinterpret_cast<char*>(&read_size_)) + sizeof(eof_));
}

GetFileResponse::~GetFileResponse() {
  // @@protoc_insertion_point(destructor:braft.GetFileResponse)
  SharedDtor();
}

void GetFileResponse::SharedDtor() {
}

void GetFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileResponse::descriptor() {
  ::protobuf_braft_2ffile_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2ffile_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFileResponse& GetFileResponse::default_instance() {
  ::protobuf_braft_2ffile_5fservice_2eproto::InitDefaultsGetFileResponse();
  return *internal_default_instance();
}

GetFileResponse* GetFileResponse::New(::google::protobuf::Arena* arena) const {
  GetFileResponse* n = new GetFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.GetFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&read_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eof_) -
        reinterpret_cast<char*>(&read_size_)) + sizeof(eof_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.GetFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool eof = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 read_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_read_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &read_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.GetFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.GetFileResponse)
  return false;
#undef DO_
}

void GetFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.GetFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool eof = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->eof(), output);
  }

  // optional int64 read_size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->read_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.GetFileResponse)
}

::google::protobuf::uint8* GetFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.GetFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool eof = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->eof(), target);
  }

  // optional int64 read_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->read_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.GetFileResponse)
  return target;
}

size_t GetFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.GetFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool eof = 1;
  if (has_eof()) {
    total_size += 1 + 1;
  }
  // optional int64 read_size = 2;
  if (has_read_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->read_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.GetFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.GetFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.GetFileResponse)
    MergeFrom(*source);
  }
}

void GetFileResponse::MergeFrom(const GetFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.GetFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      read_size_ = from.read_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      eof_ = from.eof_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.GetFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileResponse::CopyFrom(const GetFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.GetFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void GetFileResponse::Swap(GetFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFileResponse::InternalSwap(GetFileResponse* other) {
  using std::swap;
  swap(read_size_, other->read_size_);
  swap(eof_, other->eof_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFileResponse::GetMetadata() const {
  protobuf_braft_2ffile_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2ffile_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

FileService::~FileService() {}

const ::google::protobuf::ServiceDescriptor* FileService::descriptor() {
  protobuf_braft_2ffile_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_braft_2ffile_5fservice_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* FileService::GetDescriptor() {
  return descriptor();
}

void FileService::get_file(::google::protobuf::RpcController* controller,
                         const ::braft::GetFileRequest*,
                         ::braft::GetFileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method get_file() not implemented.");
  done->Run();
}

void FileService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_braft_2ffile_5fservice_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      get_file(controller,
             ::google::protobuf::down_cast<const ::braft::GetFileRequest*>(request),
             ::google::protobuf::down_cast< ::braft::GetFileResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FileService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::GetFileRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FileService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::GetFileResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FileService_Stub::FileService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FileService_Stub::FileService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FileService_Stub::~FileService_Stub() {
  if (owns_channel_) delete channel_;
}

void FileService_Stub::get_file(::google::protobuf::RpcController* controller,
                              const ::braft::GetFileRequest* request,
                              ::braft::GetFileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace braft

// @@protoc_insertion_point(global_scope)
