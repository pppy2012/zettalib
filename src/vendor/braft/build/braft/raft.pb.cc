// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/raft.proto

#include "braft/raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace braft {
class EntryMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntryMeta>
      _instance;
} _EntryMeta_default_instance_;
class TermLeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TermLeader>
      _instance;
} _TermLeader_default_instance_;
class RequestVoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteRequest>
      _instance;
} _RequestVoteRequest_default_instance_;
class RequestVoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteResponse>
      _instance;
} _RequestVoteResponse_default_instance_;
class AppendEntriesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesRequest>
      _instance;
} _AppendEntriesRequest_default_instance_;
class AppendEntriesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesResponse>
      _instance;
} _AppendEntriesResponse_default_instance_;
class SnapshotMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnapshotMeta>
      _instance;
} _SnapshotMeta_default_instance_;
class InstallSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstallSnapshotRequest>
      _instance;
} _InstallSnapshotRequest_default_instance_;
class InstallSnapshotResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstallSnapshotResponse>
      _instance;
} _InstallSnapshotResponse_default_instance_;
class TimeoutNowRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeoutNowRequest>
      _instance;
} _TimeoutNowRequest_default_instance_;
class TimeoutNowResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeoutNowResponse>
      _instance;
} _TimeoutNowResponse_default_instance_;
}  // namespace braft
namespace protobuf_braft_2fraft_2eproto {
void InitDefaultsEntryMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_EntryMeta_default_instance_;
    new (ptr) ::braft::EntryMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::EntryMeta::InitAsDefaultInstance();
}

void InitDefaultsEntryMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntryMetaImpl);
}

void InitDefaultsTermLeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_TermLeader_default_instance_;
    new (ptr) ::braft::TermLeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::TermLeader::InitAsDefaultInstance();
}

void InitDefaultsTermLeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTermLeaderImpl);
}

void InitDefaultsRequestVoteRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_braft_2fraft_2eproto::InitDefaultsTermLeader();
  {
    void* ptr = &::braft::_RequestVoteRequest_default_instance_;
    new (ptr) ::braft::RequestVoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::RequestVoteRequest::InitAsDefaultInstance();
}

void InitDefaultsRequestVoteRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestVoteRequestImpl);
}

void InitDefaultsRequestVoteResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_RequestVoteResponse_default_instance_;
    new (ptr) ::braft::RequestVoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::RequestVoteResponse::InitAsDefaultInstance();
}

void InitDefaultsRequestVoteResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestVoteResponseImpl);
}

void InitDefaultsAppendEntriesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_braft_2fraft_2eproto::InitDefaultsEntryMeta();
  {
    void* ptr = &::braft::_AppendEntriesRequest_default_instance_;
    new (ptr) ::braft::AppendEntriesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::AppendEntriesRequest::InitAsDefaultInstance();
}

void InitDefaultsAppendEntriesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAppendEntriesRequestImpl);
}

void InitDefaultsAppendEntriesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_AppendEntriesResponse_default_instance_;
    new (ptr) ::braft::AppendEntriesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::AppendEntriesResponse::InitAsDefaultInstance();
}

void InitDefaultsAppendEntriesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAppendEntriesResponseImpl);
}

void InitDefaultsSnapshotMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_SnapshotMeta_default_instance_;
    new (ptr) ::braft::SnapshotMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::SnapshotMeta::InitAsDefaultInstance();
}

void InitDefaultsSnapshotMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSnapshotMetaImpl);
}

void InitDefaultsInstallSnapshotRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_braft_2fraft_2eproto::InitDefaultsSnapshotMeta();
  {
    void* ptr = &::braft::_InstallSnapshotRequest_default_instance_;
    new (ptr) ::braft::InstallSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::InstallSnapshotRequest::InitAsDefaultInstance();
}

void InitDefaultsInstallSnapshotRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInstallSnapshotRequestImpl);
}

void InitDefaultsInstallSnapshotResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_InstallSnapshotResponse_default_instance_;
    new (ptr) ::braft::InstallSnapshotResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::InstallSnapshotResponse::InitAsDefaultInstance();
}

void InitDefaultsInstallSnapshotResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInstallSnapshotResponseImpl);
}

void InitDefaultsTimeoutNowRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_TimeoutNowRequest_default_instance_;
    new (ptr) ::braft::TimeoutNowRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::TimeoutNowRequest::InitAsDefaultInstance();
}

void InitDefaultsTimeoutNowRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeoutNowRequestImpl);
}

void InitDefaultsTimeoutNowResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_TimeoutNowResponse_default_instance_;
    new (ptr) ::braft::TimeoutNowResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::TimeoutNowResponse::InitAsDefaultInstance();
}

void InitDefaultsTimeoutNowResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeoutNowResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::EntryMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::EntryMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::EntryMeta, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::EntryMeta, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::EntryMeta, peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::EntryMeta, data_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::EntryMeta, old_peers_),
  0,
  2,
  ~0u,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TermLeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TermLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TermLeader, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TermLeader, term_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, last_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteRequest, disrupted_leader_),
  0,
  1,
  2,
  4,
  5,
  6,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteResponse, granted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteResponse, disrupted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteResponse, previous_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::RequestVoteResponse, rejected_by_lease_),
  0,
  2,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, prev_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, prev_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesRequest, committed_index_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesResponse, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::AppendEntriesResponse, readonly_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::SnapshotMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::SnapshotMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::SnapshotMeta, last_included_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::SnapshotMeta, last_included_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::SnapshotMeta, peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::SnapshotMeta, old_peers_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotRequest, uri_),
  0,
  1,
  2,
  5,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::InstallSnapshotResponse, success_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowRequest, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowRequest, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowRequest, old_leader_stepped_down_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::TimeoutNowResponse, success_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::braft::EntryMeta)},
  { 15, 22, sizeof(::braft::TermLeader)},
  { 24, 36, sizeof(::braft::RequestVoteRequest)},
  { 43, 53, sizeof(::braft::RequestVoteResponse)},
  { 58, 71, sizeof(::braft::AppendEntriesRequest)},
  { 79, 88, sizeof(::braft::AppendEntriesResponse)},
  { 92, 101, sizeof(::braft::SnapshotMeta)},
  { 105, 116, sizeof(::braft::InstallSnapshotRequest)},
  { 122, 129, sizeof(::braft::InstallSnapshotResponse)},
  { 131, 141, sizeof(::braft::TimeoutNowRequest)},
  { 146, 153, sizeof(::braft::TimeoutNowResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_EntryMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_TermLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_RequestVoteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_RequestVoteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_AppendEntriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_AppendEntriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_SnapshotMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_InstallSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_InstallSnapshotResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_TimeoutNowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_TimeoutNowResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "braft/raft.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020braft/raft.proto\022\005braft\032\020braft/enum.pr"
      "oto\"m\n\tEntryMeta\022\014\n\004term\030\001 \002(\003\022\036\n\004type\030\002"
      " \002(\0162\020.braft.EntryType\022\r\n\005peers\030\003 \003(\t\022\020\n"
      "\010data_len\030\004 \001(\003\022\021\n\told_peers\030\005 \003(\t\"+\n\nTe"
      "rmLeader\022\017\n\007peer_id\030\001 \002(\t\022\014\n\004term\030\002 \002(\003\""
      "\264\001\n\022RequestVoteRequest\022\020\n\010group_id\030\001 \002(\t"
      "\022\021\n\tserver_id\030\002 \002(\t\022\017\n\007peer_id\030\003 \002(\t\022\014\n\004"
      "term\030\004 \002(\003\022\025\n\rlast_log_term\030\005 \002(\003\022\026\n\016las"
      "t_log_index\030\006 \002(\003\022+\n\020disrupted_leader\030\007 "
      "\001(\0132\021.braft.TermLeader\"y\n\023RequestVoteRes"
      "ponse\022\014\n\004term\030\001 \002(\003\022\017\n\007granted\030\002 \002(\010\022\021\n\t"
      "disrupted\030\003 \001(\010\022\025\n\rprevious_term\030\004 \001(\003\022\031"
      "\n\021rejected_by_lease\030\005 \001(\010\"\305\001\n\024AppendEntr"
      "iesRequest\022\020\n\010group_id\030\001 \002(\t\022\021\n\tserver_i"
      "d\030\002 \002(\t\022\017\n\007peer_id\030\003 \002(\t\022\014\n\004term\030\004 \002(\003\022\025"
      "\n\rprev_log_term\030\005 \002(\003\022\026\n\016prev_log_index\030"
      "\006 \002(\003\022!\n\007entries\030\007 \003(\0132\020.braft.EntryMeta"
      "\022\027\n\017committed_index\030\010 \002(\003\"`\n\025AppendEntri"
      "esResponse\022\014\n\004term\030\001 \002(\003\022\017\n\007success\030\002 \002("
      "\010\022\026\n\016last_log_index\030\003 \001(\003\022\020\n\010readonly\030\004 "
      "\001(\010\"i\n\014SnapshotMeta\022\033\n\023last_included_ind"
      "ex\030\001 \002(\003\022\032\n\022last_included_term\030\002 \002(\003\022\r\n\005"
      "peers\030\003 \003(\t\022\021\n\told_peers\030\004 \003(\t\"\214\001\n\026Insta"
      "llSnapshotRequest\022\020\n\010group_id\030\001 \002(\t\022\021\n\ts"
      "erver_id\030\002 \002(\t\022\017\n\007peer_id\030\003 \002(\t\022\014\n\004term\030"
      "\004 \002(\003\022!\n\004meta\030\005 \002(\0132\023.braft.SnapshotMeta"
      "\022\013\n\003uri\030\006 \002(\t\"8\n\027InstallSnapshotResponse"
      "\022\014\n\004term\030\001 \002(\003\022\017\n\007success\030\002 \002(\010\"x\n\021Timeo"
      "utNowRequest\022\020\n\010group_id\030\001 \002(\t\022\021\n\tserver"
      "_id\030\002 \002(\t\022\017\n\007peer_id\030\003 \002(\t\022\014\n\004term\030\004 \002(\003"
      "\022\037\n\027old_leader_stepped_down\030\005 \001(\010\"3\n\022Tim"
      "eoutNowResponse\022\014\n\004term\030\001 \002(\003\022\017\n\007success"
      "\030\002 \002(\0102\373\002\n\013RaftService\022A\n\010pre_vote\022\031.bra"
      "ft.RequestVoteRequest\032\032.braft.RequestVot"
      "eResponse\022E\n\014request_vote\022\031.braft.Reques"
      "tVoteRequest\032\032.braft.RequestVoteResponse"
      "\022K\n\016append_entries\022\033.braft.AppendEntries"
      "Request\032\034.braft.AppendEntriesResponse\022Q\n"
      "\020install_snapshot\022\035.braft.InstallSnapsho"
      "tRequest\032\036.braft.InstallSnapshotResponse"
      "\022B\n\013timeout_now\022\030.braft.TimeoutNowReques"
      "t\032\031.braft.TimeoutNowResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/raft.proto", &protobuf_RegisterTypes);
  ::protobuf_braft_2fenum_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_braft_2fraft_2eproto
namespace braft {

// ===================================================================

void EntryMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntryMeta::kTermFieldNumber;
const int EntryMeta::kTypeFieldNumber;
const int EntryMeta::kPeersFieldNumber;
const int EntryMeta::kDataLenFieldNumber;
const int EntryMeta::kOldPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntryMeta::EntryMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsEntryMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.EntryMeta)
}
EntryMeta::EntryMeta(const EntryMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      peers_(from.peers_),
      old_peers_(from.old_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&term_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:braft.EntryMeta)
}

void EntryMeta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
}

EntryMeta::~EntryMeta() {
  // @@protoc_insertion_point(destructor:braft.EntryMeta)
  SharedDtor();
}

void EntryMeta::SharedDtor() {
}

void EntryMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryMeta::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntryMeta& EntryMeta::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsEntryMeta();
  return *internal_default_instance();
}

EntryMeta* EntryMeta::New(::google::protobuf::Arena* arena) const {
  EntryMeta* n = new EntryMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntryMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.EntryMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  old_peers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&term_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EntryMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.EntryMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .braft.EntryType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::braft::EntryType_IsValid(value)) {
            set_type(static_cast< ::braft::EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string peers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peers(this->peers_size() - 1).data(),
            static_cast<int>(this->peers(this->peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.EntryMeta.peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 data_len = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_data_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string old_peers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            static_cast<int>(this->old_peers(this->old_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.EntryMeta.old_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.EntryMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.EntryMeta)
  return false;
#undef DO_
}

void EntryMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.EntryMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required .braft.EntryType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string peers = 3;
  for (int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peers(i).data(), static_cast<int>(this->peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.EntryMeta.peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peers(i), output);
  }

  // optional int64 data_len = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->data_len(), output);
  }

  // repeated string old_peers = 5;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.EntryMeta.old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->old_peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.EntryMeta)
}

::google::protobuf::uint8* EntryMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.EntryMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required .braft.EntryType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string peers = 3;
  for (int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peers(i).data(), static_cast<int>(this->peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.EntryMeta.peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peers(i), target);
  }

  // optional int64 data_len = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->data_len(), target);
  }

  // repeated string old_peers = 5;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.EntryMeta.old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->old_peers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.EntryMeta)
  return target;
}

size_t EntryMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.EntryMeta)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_type()) {
    // required .braft.EntryType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t EntryMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.EntryMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required .braft.EntryType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string peers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peers_size());
  for (int i = 0, n = this->peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peers(i));
  }

  // repeated string old_peers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->old_peers_size());
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  // optional int64 data_len = 4;
  if (has_data_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data_len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.EntryMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntryMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.EntryMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.EntryMeta)
    MergeFrom(*source);
  }
}

void EntryMeta::MergeFrom(const EntryMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.EntryMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  old_peers_.MergeFrom(from.old_peers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_len_ = from.data_len_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EntryMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.EntryMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryMeta::CopyFrom(const EntryMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.EntryMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void EntryMeta::Swap(EntryMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntryMeta::InternalSwap(EntryMeta* other) {
  using std::swap;
  peers_.InternalSwap(&other->peers_);
  old_peers_.InternalSwap(&other->old_peers_);
  swap(term_, other->term_);
  swap(data_len_, other->data_len_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntryMeta::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TermLeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TermLeader::kPeerIdFieldNumber;
const int TermLeader::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TermLeader::TermLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsTermLeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.TermLeader)
}
TermLeader::TermLeader(const TermLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:braft.TermLeader)
}

void TermLeader::SharedCtor() {
  _cached_size_ = 0;
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_LONGLONG(0);
}

TermLeader::~TermLeader() {
  // @@protoc_insertion_point(destructor:braft.TermLeader)
  SharedDtor();
}

void TermLeader::SharedDtor() {
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TermLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TermLeader::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TermLeader& TermLeader::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsTermLeader();
  return *internal_default_instance();
}

TermLeader* TermLeader::New(::google::protobuf::Arena* arena) const {
  TermLeader* n = new TermLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TermLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.TermLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!peer_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*peer_id_.UnsafeRawStringPointer())->clear();
  }
  term_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TermLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.TermLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peer_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.TermLeader.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.TermLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.TermLeader)
  return false;
#undef DO_
}

void TermLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.TermLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TermLeader.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peer_id(), output);
  }

  // required int64 term = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.TermLeader)
}

::google::protobuf::uint8* TermLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.TermLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TermLeader.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peer_id(), target);
  }

  // required int64 term = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.TermLeader)
  return target;
}

size_t TermLeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.TermLeader)
  size_t total_size = 0;

  if (has_peer_id()) {
    // required string peer_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_term()) {
    // required int64 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  return total_size;
}
size_t TermLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.TermLeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string peer_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required int64 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TermLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.TermLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TermLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TermLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.TermLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.TermLeader)
    MergeFrom(*source);
  }
}

void TermLeader::MergeFrom(const TermLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.TermLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TermLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.TermLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermLeader::CopyFrom(const TermLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.TermLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermLeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TermLeader::Swap(TermLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TermLeader::InternalSwap(TermLeader* other) {
  using std::swap;
  peer_id_.Swap(&other->peer_id_);
  swap(term_, other->term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TermLeader::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteRequest::InitAsDefaultInstance() {
  ::braft::_RequestVoteRequest_default_instance_._instance.get_mutable()->disrupted_leader_ = const_cast< ::braft::TermLeader*>(
      ::braft::TermLeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteRequest::kGroupIdFieldNumber;
const int RequestVoteRequest::kServerIdFieldNumber;
const int RequestVoteRequest::kPeerIdFieldNumber;
const int RequestVoteRequest::kTermFieldNumber;
const int RequestVoteRequest::kLastLogTermFieldNumber;
const int RequestVoteRequest::kLastLogIndexFieldNumber;
const int RequestVoteRequest::kDisruptedLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteRequest::RequestVoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsRequestVoteRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.RequestVoteRequest)
}
RequestVoteRequest::RequestVoteRequest(const RequestVoteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_id()) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_id()) {
    server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  if (from.has_disrupted_leader()) {
    disrupted_leader_ = new ::braft::TermLeader(*from.disrupted_leader_);
  } else {
    disrupted_leader_ = NULL;
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_log_index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_log_index_));
  // @@protoc_insertion_point(copy_constructor:braft.RequestVoteRequest)
}

void RequestVoteRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&disrupted_leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_log_index_) -
      reinterpret_cast<char*>(&disrupted_leader_)) + sizeof(last_log_index_));
}

RequestVoteRequest::~RequestVoteRequest() {
  // @@protoc_insertion_point(destructor:braft.RequestVoteRequest)
  SharedDtor();
}

void RequestVoteRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete disrupted_leader_;
}

void RequestVoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteRequest::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteRequest& RequestVoteRequest::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsRequestVoteRequest();
  return *internal_default_instance();
}

RequestVoteRequest* RequestVoteRequest::New(::google::protobuf::Arena* arena) const {
  RequestVoteRequest* n = new RequestVoteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!group_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*group_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!server_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!peer_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(disrupted_leader_ != NULL);
      disrupted_leader_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_log_index_) -
        reinterpret_cast<char*>(&term_)) + sizeof(last_log_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestVoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.RequestVoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.RequestVoteRequest.group_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), static_cast<int>(this->server_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.RequestVoteRequest.server_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.RequestVoteRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_log_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_last_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_log_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_last_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .braft.TermLeader disrupted_leader = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_disrupted_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.RequestVoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.RequestVoteRequest)
  return false;
#undef DO_
}

void RequestVoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.RequestVoteRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.RequestVoteRequest.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.RequestVoteRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  // required int64 last_log_term = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_log_term(), output);
  }

  // required int64 last_log_index = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_log_index(), output);
  }

  // optional .braft.TermLeader disrupted_leader = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->disrupted_leader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.RequestVoteRequest)
}

::google::protobuf::uint8* RequestVoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.RequestVoteRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.RequestVoteRequest.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.RequestVoteRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  // required int64 last_log_term = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_log_term(), target);
  }

  // required int64 last_log_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_log_index(), target);
  }

  // optional .braft.TermLeader disrupted_leader = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->disrupted_leader_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.RequestVoteRequest)
  return target;
}

size_t RequestVoteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.RequestVoteRequest)
  size_t total_size = 0;

  if (has_group_id()) {
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  if (has_server_id()) {
    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());
  }

  if (has_peer_id()) {
    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_term()) {
    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_last_log_term()) {
    // required int64 last_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_term());
  }

  if (has_last_log_index()) {
    // required int64 last_log_index = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_index());
  }

  return total_size;
}
size_t RequestVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.RequestVoteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000077) ^ 0x00000077) == 0) {  // All required fields are present.
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());

    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());

    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required int64 last_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_term());

    // required int64 last_log_index = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .braft.TermLeader disrupted_leader = 7;
  if (has_disrupted_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->disrupted_leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.RequestVoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.RequestVoteRequest)
    MergeFrom(*source);
  }
}

void RequestVoteRequest::MergeFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group_id();
      group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_disrupted_leader()->::braft::TermLeader::MergeFrom(from.disrupted_leader());
    }
    if (cached_has_bits & 0x00000010u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_log_term_ = from.last_log_term_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_log_index_ = from.last_log_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestVoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRequest::CopyFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000077) != 0x00000077) return false;
  if (has_disrupted_leader()) {
    if (!this->disrupted_leader_->IsInitialized()) return false;
  }
  return true;
}

void RequestVoteRequest::Swap(RequestVoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteRequest::InternalSwap(RequestVoteRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_);
  server_id_.Swap(&other->server_id_);
  peer_id_.Swap(&other->peer_id_);
  swap(disrupted_leader_, other->disrupted_leader_);
  swap(term_, other->term_);
  swap(last_log_term_, other->last_log_term_);
  swap(last_log_index_, other->last_log_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestVoteRequest::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteResponse::kTermFieldNumber;
const int RequestVoteResponse::kGrantedFieldNumber;
const int RequestVoteResponse::kDisruptedFieldNumber;
const int RequestVoteResponse::kPreviousTermFieldNumber;
const int RequestVoteResponse::kRejectedByLeaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteResponse::RequestVoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsRequestVoteResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.RequestVoteResponse)
}
RequestVoteResponse::RequestVoteResponse(const RequestVoteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&rejected_by_lease_) -
    reinterpret_cast<char*>(&term_)) + sizeof(rejected_by_lease_));
  // @@protoc_insertion_point(copy_constructor:braft.RequestVoteResponse)
}

void RequestVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rejected_by_lease_) -
      reinterpret_cast<char*>(&term_)) + sizeof(rejected_by_lease_));
}

RequestVoteResponse::~RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:braft.RequestVoteResponse)
  SharedDtor();
}

void RequestVoteResponse::SharedDtor() {
}

void RequestVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteResponse::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteResponse& RequestVoteResponse::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsRequestVoteResponse();
  return *internal_default_instance();
}

RequestVoteResponse* RequestVoteResponse::New(::google::protobuf::Arena* arena) const {
  RequestVoteResponse* n = new RequestVoteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rejected_by_lease_) -
        reinterpret_cast<char*>(&term_)) + sizeof(rejected_by_lease_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.RequestVoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool granted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disrupted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_disrupted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disrupted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 previous_term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_previous_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rejected_by_lease = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rejected_by_lease();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rejected_by_lease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.RequestVoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.RequestVoteResponse)
  return false;
#undef DO_
}

void RequestVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool granted = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->granted(), output);
  }

  // optional bool disrupted = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disrupted(), output);
  }

  // optional int64 previous_term = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->previous_term(), output);
  }

  // optional bool rejected_by_lease = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rejected_by_lease(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.RequestVoteResponse)
}

::google::protobuf::uint8* RequestVoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool granted = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->granted(), target);
  }

  // optional bool disrupted = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disrupted(), target);
  }

  // optional int64 previous_term = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->previous_term(), target);
  }

  // optional bool rejected_by_lease = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rejected_by_lease(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.RequestVoteResponse)
  return target;
}

size_t RequestVoteResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.RequestVoteResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_granted()) {
    // required bool granted = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.RequestVoteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required bool granted = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 previous_term = 4;
  if (has_previous_term()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->previous_term());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional bool disrupted = 3;
    if (has_disrupted()) {
      total_size += 1 + 1;
    }

    // optional bool rejected_by_lease = 5;
    if (has_rejected_by_lease()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.RequestVoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.RequestVoteResponse)
    MergeFrom(*source);
  }
}

void RequestVoteResponse::MergeFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      previous_term_ = from.previous_term_;
    }
    if (cached_has_bits & 0x00000004u) {
      granted_ = from.granted_;
    }
    if (cached_has_bits & 0x00000008u) {
      disrupted_ = from.disrupted_;
    }
    if (cached_has_bits & 0x00000010u) {
      rejected_by_lease_ = from.rejected_by_lease_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteResponse::CopyFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void RequestVoteResponse::Swap(RequestVoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteResponse::InternalSwap(RequestVoteResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(previous_term_, other->previous_term_);
  swap(granted_, other->granted_);
  swap(disrupted_, other->disrupted_);
  swap(rejected_by_lease_, other->rejected_by_lease_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestVoteResponse::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesRequest::kGroupIdFieldNumber;
const int AppendEntriesRequest::kServerIdFieldNumber;
const int AppendEntriesRequest::kPeerIdFieldNumber;
const int AppendEntriesRequest::kTermFieldNumber;
const int AppendEntriesRequest::kPrevLogTermFieldNumber;
const int AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int AppendEntriesRequest::kEntriesFieldNumber;
const int AppendEntriesRequest::kCommittedIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesRequest::AppendEntriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsAppendEntriesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_id()) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_id()) {
    server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&committed_index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(committed_index_));
  // @@protoc_insertion_point(copy_constructor:braft.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&committed_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(committed_index_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:braft.AppendEntriesRequest)
  SharedDtor();
}

void AppendEntriesRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsAppendEntriesRequest();
  return *internal_default_instance();
}

AppendEntriesRequest* AppendEntriesRequest::New(::google::protobuf::Arena* arena) const {
  AppendEntriesRequest* n = new AppendEntriesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!group_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*group_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!server_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!peer_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&committed_index_) -
        reinterpret_cast<char*>(&term_)) + sizeof(committed_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.AppendEntriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.AppendEntriesRequest.group_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), static_cast<int>(this->server_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.AppendEntriesRequest.server_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.AppendEntriesRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 prev_log_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_prev_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prev_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 prev_log_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_prev_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prev_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .braft.EntryMeta entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 committed_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_committed_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &committed_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.AppendEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.AppendEntriesRequest)
  return false;
#undef DO_
}

void AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.AppendEntriesRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.AppendEntriesRequest.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.AppendEntriesRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  // required int64 prev_log_term = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->prev_log_term(), output);
  }

  // required int64 prev_log_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->prev_log_index(), output);
  }

  // repeated .braft.EntryMeta entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(static_cast<int>(i)), output);
  }

  // required int64 committed_index = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->committed_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.AppendEntriesRequest)
}

::google::protobuf::uint8* AppendEntriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.AppendEntriesRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.AppendEntriesRequest.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.AppendEntriesRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  // required int64 prev_log_term = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->prev_log_term(), target);
  }

  // required int64 prev_log_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->prev_log_index(), target);
  }

  // repeated .braft.EntryMeta entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->entries(static_cast<int>(i)), deterministic, target);
  }

  // required int64 committed_index = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->committed_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.AppendEntriesRequest)
  size_t total_size = 0;

  if (has_group_id()) {
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  if (has_server_id()) {
    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());
  }

  if (has_peer_id()) {
    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_term()) {
    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_prev_log_term()) {
    // required int64 prev_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prev_log_term());
  }

  if (has_prev_log_index()) {
    // required int64 prev_log_index = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prev_log_index());
  }

  if (has_committed_index()) {
    // required int64 committed_index = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->committed_index());
  }

  return total_size;
}
size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.AppendEntriesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());

    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());

    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required int64 prev_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prev_log_term());

    // required int64 prev_log_index = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prev_log_index());

    // required int64 committed_index = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->committed_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .braft.EntryMeta entries = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.AppendEntriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group_id();
      group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000010u) {
      prev_log_term_ = from.prev_log_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      prev_log_index_ = from.prev_log_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      committed_index_ = from.committed_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  entries_.InternalSwap(&other->entries_);
  group_id_.Swap(&other->group_id_);
  server_id_.Swap(&other->server_id_);
  peer_id_.Swap(&other->peer_id_);
  swap(term_, other->term_);
  swap(prev_log_term_, other->prev_log_term_);
  swap(prev_log_index_, other->prev_log_index_);
  swap(committed_index_, other->committed_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesResponse::kTermFieldNumber;
const int AppendEntriesResponse::kSuccessFieldNumber;
const int AppendEntriesResponse::kLastLogIndexFieldNumber;
const int AppendEntriesResponse::kReadonlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesResponse::AppendEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsAppendEntriesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&readonly_) -
    reinterpret_cast<char*>(&term_)) + sizeof(readonly_));
  // @@protoc_insertion_point(copy_constructor:braft.AppendEntriesResponse)
}

void AppendEntriesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readonly_) -
      reinterpret_cast<char*>(&term_)) + sizeof(readonly_));
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:braft.AppendEntriesResponse)
  SharedDtor();
}

void AppendEntriesResponse::SharedDtor() {
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResponse::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsAppendEntriesResponse();
  return *internal_default_instance();
}

AppendEntriesResponse* AppendEntriesResponse::New(::google::protobuf::Arena* arena) const {
  AppendEntriesResponse* n = new AppendEntriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&readonly_) -
        reinterpret_cast<char*>(&term_)) + sizeof(readonly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.AppendEntriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_log_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool readonly = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_readonly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.AppendEntriesResponse)
  return false;
#undef DO_
}

void AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional int64 last_log_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_log_index(), output);
  }

  // optional bool readonly = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->readonly(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.AppendEntriesResponse)
}

::google::protobuf::uint8* AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional int64 last_log_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_log_index(), target);
  }

  // optional bool readonly = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->readonly(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.AppendEntriesResponse)
  return target;
}

size_t AppendEntriesResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.AppendEntriesResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.AppendEntriesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required bool success = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 last_log_index = 3;
  if (has_last_log_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_index());
  }

  // optional bool readonly = 4;
  if (has_readonly()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.AppendEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_log_index_ = from.last_log_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      readonly_ = from.readonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void AppendEntriesResponse::Swap(AppendEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(last_log_index_, other->last_log_index_);
  swap(success_, other->success_);
  swap(readonly_, other->readonly_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SnapshotMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotMeta::kLastIncludedIndexFieldNumber;
const int SnapshotMeta::kLastIncludedTermFieldNumber;
const int SnapshotMeta::kPeersFieldNumber;
const int SnapshotMeta::kOldPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotMeta::SnapshotMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsSnapshotMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.SnapshotMeta)
}
SnapshotMeta::SnapshotMeta(const SnapshotMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      peers_(from.peers_),
      old_peers_(from.old_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_included_index_, &from.last_included_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_included_term_) -
    reinterpret_cast<char*>(&last_included_index_)) + sizeof(last_included_term_));
  // @@protoc_insertion_point(copy_constructor:braft.SnapshotMeta)
}

void SnapshotMeta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_included_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_included_term_) -
      reinterpret_cast<char*>(&last_included_index_)) + sizeof(last_included_term_));
}

SnapshotMeta::~SnapshotMeta() {
  // @@protoc_insertion_point(destructor:braft.SnapshotMeta)
  SharedDtor();
}

void SnapshotMeta::SharedDtor() {
}

void SnapshotMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotMeta::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotMeta& SnapshotMeta::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsSnapshotMeta();
  return *internal_default_instance();
}

SnapshotMeta* SnapshotMeta::New(::google::protobuf::Arena* arena) const {
  SnapshotMeta* n = new SnapshotMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.SnapshotMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  old_peers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_included_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_included_term_) -
        reinterpret_cast<char*>(&last_included_index_)) + sizeof(last_included_term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnapshotMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.SnapshotMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_included_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_included_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_included_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_included_term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_included_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_included_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string peers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peers(this->peers_size() - 1).data(),
            static_cast<int>(this->peers(this->peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.SnapshotMeta.peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string old_peers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            static_cast<int>(this->old_peers(this->old_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.SnapshotMeta.old_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.SnapshotMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.SnapshotMeta)
  return false;
#undef DO_
}

void SnapshotMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.SnapshotMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_included_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_included_index(), output);
  }

  // required int64 last_included_term = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_included_term(), output);
  }

  // repeated string peers = 3;
  for (int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peers(i).data(), static_cast<int>(this->peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.SnapshotMeta.peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peers(i), output);
  }

  // repeated string old_peers = 4;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.SnapshotMeta.old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->old_peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.SnapshotMeta)
}

::google::protobuf::uint8* SnapshotMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.SnapshotMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_included_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_included_index(), target);
  }

  // required int64 last_included_term = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_included_term(), target);
  }

  // repeated string peers = 3;
  for (int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peers(i).data(), static_cast<int>(this->peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.SnapshotMeta.peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peers(i), target);
  }

  // repeated string old_peers = 4;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.SnapshotMeta.old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->old_peers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.SnapshotMeta)
  return target;
}

size_t SnapshotMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.SnapshotMeta)
  size_t total_size = 0;

  if (has_last_included_index()) {
    // required int64 last_included_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_included_index());
  }

  if (has_last_included_term()) {
    // required int64 last_included_term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_included_term());
  }

  return total_size;
}
size_t SnapshotMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.SnapshotMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 last_included_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_included_index());

    // required int64 last_included_term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_included_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string peers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peers_size());
  for (int i = 0, n = this->peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peers(i));
  }

  // repeated string old_peers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->old_peers_size());
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.SnapshotMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.SnapshotMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.SnapshotMeta)
    MergeFrom(*source);
  }
}

void SnapshotMeta::MergeFrom(const SnapshotMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.SnapshotMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  old_peers_.MergeFrom(from.old_peers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_included_index_ = from.last_included_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_included_term_ = from.last_included_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnapshotMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.SnapshotMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotMeta::CopyFrom(const SnapshotMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.SnapshotMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SnapshotMeta::Swap(SnapshotMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotMeta::InternalSwap(SnapshotMeta* other) {
  using std::swap;
  peers_.InternalSwap(&other->peers_);
  old_peers_.InternalSwap(&other->old_peers_);
  swap(last_included_index_, other->last_included_index_);
  swap(last_included_term_, other->last_included_term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotMeta::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InstallSnapshotRequest::InitAsDefaultInstance() {
  ::braft::_InstallSnapshotRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::braft::SnapshotMeta*>(
      ::braft::SnapshotMeta::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallSnapshotRequest::kGroupIdFieldNumber;
const int InstallSnapshotRequest::kServerIdFieldNumber;
const int InstallSnapshotRequest::kPeerIdFieldNumber;
const int InstallSnapshotRequest::kTermFieldNumber;
const int InstallSnapshotRequest::kMetaFieldNumber;
const int InstallSnapshotRequest::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallSnapshotRequest::InstallSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsInstallSnapshotRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.InstallSnapshotRequest)
}
InstallSnapshotRequest::InstallSnapshotRequest(const InstallSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_id()) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_id()) {
    server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.has_meta()) {
    meta_ = new ::braft::SnapshotMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:braft.InstallSnapshotRequest)
}

void InstallSnapshotRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(term_));
}

InstallSnapshotRequest::~InstallSnapshotRequest() {
  // @@protoc_insertion_point(destructor:braft.InstallSnapshotRequest)
  SharedDtor();
}

void InstallSnapshotRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
}

void InstallSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotRequest::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstallSnapshotRequest& InstallSnapshotRequest::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsInstallSnapshotRequest();
  return *internal_default_instance();
}

InstallSnapshotRequest* InstallSnapshotRequest::New(::google::protobuf::Arena* arena) const {
  InstallSnapshotRequest* n = new InstallSnapshotRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.InstallSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!group_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*group_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!server_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!peer_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uri_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(meta_ != NULL);
      meta_->Clear();
    }
  }
  term_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InstallSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.InstallSnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.InstallSnapshotRequest.group_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), static_cast<int>(this->server_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.InstallSnapshotRequest.server_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.InstallSnapshotRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .braft.SnapshotMeta meta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string uri = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.InstallSnapshotRequest.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.InstallSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.InstallSnapshotRequest)
  return false;
#undef DO_
}

void InstallSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.InstallSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  // required .braft.SnapshotMeta meta = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->meta_, output);
  }

  // required string uri = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.InstallSnapshotRequest)
}

::google::protobuf::uint8* InstallSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.InstallSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  // required .braft.SnapshotMeta meta = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->meta_, deterministic, target);
  }

  // required string uri = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.InstallSnapshotRequest.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.InstallSnapshotRequest)
  return target;
}

size_t InstallSnapshotRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.InstallSnapshotRequest)
  size_t total_size = 0;

  if (has_group_id()) {
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  if (has_server_id()) {
    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());
  }

  if (has_peer_id()) {
    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_uri()) {
    // required string uri = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  if (has_meta()) {
    // required .braft.SnapshotMeta meta = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->meta_);
  }

  if (has_term()) {
    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  return total_size;
}
size_t InstallSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.InstallSnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());

    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());

    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required string uri = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());

    // required .braft.SnapshotMeta meta = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->meta_);

    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.InstallSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallSnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.InstallSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.InstallSnapshotRequest)
    MergeFrom(*source);
  }
}

void InstallSnapshotRequest::MergeFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.InstallSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group_id();
      group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_meta()->::braft::SnapshotMeta::MergeFrom(from.meta());
    }
    if (cached_has_bits & 0x00000020u) {
      term_ = from.term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstallSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.InstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotRequest::CopyFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.InstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_meta()) {
    if (!this->meta_->IsInitialized()) return false;
  }
  return true;
}

void InstallSnapshotRequest::Swap(InstallSnapshotRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallSnapshotRequest::InternalSwap(InstallSnapshotRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_);
  server_id_.Swap(&other->server_id_);
  peer_id_.Swap(&other->peer_id_);
  uri_.Swap(&other->uri_);
  swap(meta_, other->meta_);
  swap(term_, other->term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallSnapshotRequest::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InstallSnapshotResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallSnapshotResponse::kTermFieldNumber;
const int InstallSnapshotResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallSnapshotResponse::InstallSnapshotResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsInstallSnapshotResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.InstallSnapshotResponse)
}
InstallSnapshotResponse::InstallSnapshotResponse(const InstallSnapshotResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:braft.InstallSnapshotResponse)
}

void InstallSnapshotResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

InstallSnapshotResponse::~InstallSnapshotResponse() {
  // @@protoc_insertion_point(destructor:braft.InstallSnapshotResponse)
  SharedDtor();
}

void InstallSnapshotResponse::SharedDtor() {
}

void InstallSnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotResponse::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstallSnapshotResponse& InstallSnapshotResponse::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsInstallSnapshotResponse();
  return *internal_default_instance();
}

InstallSnapshotResponse* InstallSnapshotResponse::New(::google::protobuf::Arena* arena) const {
  InstallSnapshotResponse* n = new InstallSnapshotResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.InstallSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&term_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InstallSnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.InstallSnapshotResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.InstallSnapshotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.InstallSnapshotResponse)
  return false;
#undef DO_
}

void InstallSnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.InstallSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.InstallSnapshotResponse)
}

::google::protobuf::uint8* InstallSnapshotResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.InstallSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.InstallSnapshotResponse)
  return target;
}

size_t InstallSnapshotResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.InstallSnapshotResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InstallSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.InstallSnapshotResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required bool success = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.InstallSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapshotResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallSnapshotResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.InstallSnapshotResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.InstallSnapshotResponse)
    MergeFrom(*source);
  }
}

void InstallSnapshotResponse::MergeFrom(const InstallSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.InstallSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstallSnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.InstallSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotResponse::CopyFrom(const InstallSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.InstallSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InstallSnapshotResponse::Swap(InstallSnapshotResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallSnapshotResponse::InternalSwap(InstallSnapshotResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallSnapshotResponse::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeoutNowRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeoutNowRequest::kGroupIdFieldNumber;
const int TimeoutNowRequest::kServerIdFieldNumber;
const int TimeoutNowRequest::kPeerIdFieldNumber;
const int TimeoutNowRequest::kTermFieldNumber;
const int TimeoutNowRequest::kOldLeaderSteppedDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeoutNowRequest::TimeoutNowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsTimeoutNowRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.TimeoutNowRequest)
}
TimeoutNowRequest::TimeoutNowRequest(const TimeoutNowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_id()) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_id()) {
    server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_leader_stepped_down_) -
    reinterpret_cast<char*>(&term_)) + sizeof(old_leader_stepped_down_));
  // @@protoc_insertion_point(copy_constructor:braft.TimeoutNowRequest)
}

void TimeoutNowRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_leader_stepped_down_) -
      reinterpret_cast<char*>(&term_)) + sizeof(old_leader_stepped_down_));
}

TimeoutNowRequest::~TimeoutNowRequest() {
  // @@protoc_insertion_point(destructor:braft.TimeoutNowRequest)
  SharedDtor();
}

void TimeoutNowRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimeoutNowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeoutNowRequest::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeoutNowRequest& TimeoutNowRequest::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsTimeoutNowRequest();
  return *internal_default_instance();
}

TimeoutNowRequest* TimeoutNowRequest::New(::google::protobuf::Arena* arena) const {
  TimeoutNowRequest* n = new TimeoutNowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeoutNowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.TimeoutNowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!group_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*group_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!server_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!peer_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&old_leader_stepped_down_) -
        reinterpret_cast<char*>(&term_)) + sizeof(old_leader_stepped_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeoutNowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.TimeoutNowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.TimeoutNowRequest.group_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), static_cast<int>(this->server_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.TimeoutNowRequest.server_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "braft.TimeoutNowRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool old_leader_stepped_down = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_old_leader_stepped_down();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &old_leader_stepped_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.TimeoutNowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.TimeoutNowRequest)
  return false;
#undef DO_
}

void TimeoutNowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.TimeoutNowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TimeoutNowRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TimeoutNowRequest.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TimeoutNowRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  // optional bool old_leader_stepped_down = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->old_leader_stepped_down(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.TimeoutNowRequest)
}

::google::protobuf::uint8* TimeoutNowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.TimeoutNowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TimeoutNowRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TimeoutNowRequest.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "braft.TimeoutNowRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  // optional bool old_leader_stepped_down = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->old_leader_stepped_down(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.TimeoutNowRequest)
  return target;
}

size_t TimeoutNowRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.TimeoutNowRequest)
  size_t total_size = 0;

  if (has_group_id()) {
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  if (has_server_id()) {
    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());
  }

  if (has_peer_id()) {
    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_term()) {
    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  return total_size;
}
size_t TimeoutNowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.TimeoutNowRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());

    // required string server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());

    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required int64 term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool old_leader_stepped_down = 5;
  if (has_old_leader_stepped_down()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeoutNowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.TimeoutNowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeoutNowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeoutNowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.TimeoutNowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.TimeoutNowRequest)
    MergeFrom(*source);
  }
}

void TimeoutNowRequest::MergeFrom(const TimeoutNowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.TimeoutNowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group_id();
      group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000010u) {
      old_leader_stepped_down_ = from.old_leader_stepped_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeoutNowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.TimeoutNowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeoutNowRequest::CopyFrom(const TimeoutNowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.TimeoutNowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutNowRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void TimeoutNowRequest::Swap(TimeoutNowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeoutNowRequest::InternalSwap(TimeoutNowRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_);
  server_id_.Swap(&other->server_id_);
  peer_id_.Swap(&other->peer_id_);
  swap(term_, other->term_);
  swap(old_leader_stepped_down_, other->old_leader_stepped_down_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeoutNowRequest::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeoutNowResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeoutNowResponse::kTermFieldNumber;
const int TimeoutNowResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeoutNowResponse::TimeoutNowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fraft_2eproto::InitDefaultsTimeoutNowResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.TimeoutNowResponse)
}
TimeoutNowResponse::TimeoutNowResponse(const TimeoutNowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:braft.TimeoutNowResponse)
}

void TimeoutNowResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

TimeoutNowResponse::~TimeoutNowResponse() {
  // @@protoc_insertion_point(destructor:braft.TimeoutNowResponse)
  SharedDtor();
}

void TimeoutNowResponse::SharedDtor() {
}

void TimeoutNowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeoutNowResponse::descriptor() {
  ::protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeoutNowResponse& TimeoutNowResponse::default_instance() {
  ::protobuf_braft_2fraft_2eproto::InitDefaultsTimeoutNowResponse();
  return *internal_default_instance();
}

TimeoutNowResponse* TimeoutNowResponse::New(::google::protobuf::Arena* arena) const {
  TimeoutNowResponse* n = new TimeoutNowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeoutNowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.TimeoutNowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&term_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeoutNowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.TimeoutNowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.TimeoutNowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.TimeoutNowResponse)
  return false;
#undef DO_
}

void TimeoutNowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.TimeoutNowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.TimeoutNowResponse)
}

::google::protobuf::uint8* TimeoutNowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.TimeoutNowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.TimeoutNowResponse)
  return target;
}

size_t TimeoutNowResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:braft.TimeoutNowResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TimeoutNowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.TimeoutNowResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required bool success = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeoutNowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.TimeoutNowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeoutNowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeoutNowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.TimeoutNowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.TimeoutNowResponse)
    MergeFrom(*source);
  }
}

void TimeoutNowResponse::MergeFrom(const TimeoutNowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.TimeoutNowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeoutNowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.TimeoutNowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeoutNowResponse::CopyFrom(const TimeoutNowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.TimeoutNowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutNowResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TimeoutNowResponse::Swap(TimeoutNowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeoutNowResponse::InternalSwap(TimeoutNowResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeoutNowResponse::GetMetadata() const {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fraft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

RaftService::~RaftService() {}

const ::google::protobuf::ServiceDescriptor* RaftService::descriptor() {
  protobuf_braft_2fraft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_braft_2fraft_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* RaftService::GetDescriptor() {
  return descriptor();
}

void RaftService::pre_vote(::google::protobuf::RpcController* controller,
                         const ::braft::RequestVoteRequest*,
                         ::braft::RequestVoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method pre_vote() not implemented.");
  done->Run();
}

void RaftService::request_vote(::google::protobuf::RpcController* controller,
                         const ::braft::RequestVoteRequest*,
                         ::braft::RequestVoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method request_vote() not implemented.");
  done->Run();
}

void RaftService::append_entries(::google::protobuf::RpcController* controller,
                         const ::braft::AppendEntriesRequest*,
                         ::braft::AppendEntriesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method append_entries() not implemented.");
  done->Run();
}

void RaftService::install_snapshot(::google::protobuf::RpcController* controller,
                         const ::braft::InstallSnapshotRequest*,
                         ::braft::InstallSnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method install_snapshot() not implemented.");
  done->Run();
}

void RaftService::timeout_now(::google::protobuf::RpcController* controller,
                         const ::braft::TimeoutNowRequest*,
                         ::braft::TimeoutNowResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method timeout_now() not implemented.");
  done->Run();
}

void RaftService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_braft_2fraft_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      pre_vote(controller,
             ::google::protobuf::down_cast<const ::braft::RequestVoteRequest*>(request),
             ::google::protobuf::down_cast< ::braft::RequestVoteResponse*>(response),
             done);
      break;
    case 1:
      request_vote(controller,
             ::google::protobuf::down_cast<const ::braft::RequestVoteRequest*>(request),
             ::google::protobuf::down_cast< ::braft::RequestVoteResponse*>(response),
             done);
      break;
    case 2:
      append_entries(controller,
             ::google::protobuf::down_cast<const ::braft::AppendEntriesRequest*>(request),
             ::google::protobuf::down_cast< ::braft::AppendEntriesResponse*>(response),
             done);
      break;
    case 3:
      install_snapshot(controller,
             ::google::protobuf::down_cast<const ::braft::InstallSnapshotRequest*>(request),
             ::google::protobuf::down_cast< ::braft::InstallSnapshotResponse*>(response),
             done);
      break;
    case 4:
      timeout_now(controller,
             ::google::protobuf::down_cast<const ::braft::TimeoutNowRequest*>(request),
             ::google::protobuf::down_cast< ::braft::TimeoutNowResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RaftService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::RequestVoteRequest::default_instance();
    case 1:
      return ::braft::RequestVoteRequest::default_instance();
    case 2:
      return ::braft::AppendEntriesRequest::default_instance();
    case 3:
      return ::braft::InstallSnapshotRequest::default_instance();
    case 4:
      return ::braft::TimeoutNowRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RaftService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::RequestVoteResponse::default_instance();
    case 1:
      return ::braft::RequestVoteResponse::default_instance();
    case 2:
      return ::braft::AppendEntriesResponse::default_instance();
    case 3:
      return ::braft::InstallSnapshotResponse::default_instance();
    case 4:
      return ::braft::TimeoutNowResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RaftService_Stub::RaftService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftService_Stub::RaftService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RaftService_Stub::~RaftService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftService_Stub::pre_vote(::google::protobuf::RpcController* controller,
                              const ::braft::RequestVoteRequest* request,
                              ::braft::RequestVoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftService_Stub::request_vote(::google::protobuf::RpcController* controller,
                              const ::braft::RequestVoteRequest* request,
                              ::braft::RequestVoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftService_Stub::append_entries(::google::protobuf::RpcController* controller,
                              const ::braft::AppendEntriesRequest* request,
                              ::braft::AppendEntriesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RaftService_Stub::install_snapshot(::google::protobuf::RpcController* controller,
                              const ::braft::InstallSnapshotRequest* request,
                              ::braft::InstallSnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void RaftService_Stub::timeout_now(::google::protobuf::RpcController* controller,
                              const ::braft::TimeoutNowRequest* request,
                              ::braft::TimeoutNowResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace braft

// @@protoc_insertion_point(global_scope)
