// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/builtin_service.proto

#include "braft/builtin_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace braft {
class IndexRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexRequest>
      _instance;
} _IndexRequest_default_instance_;
class IndexResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexResponse>
      _instance;
} _IndexResponse_default_instance_;
}  // namespace braft
namespace protobuf_braft_2fbuiltin_5fservice_2eproto {
void InitDefaultsIndexRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_IndexRequest_default_instance_;
    new (ptr) ::braft::IndexRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::IndexRequest::InitAsDefaultInstance();
}

void InitDefaultsIndexRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIndexRequestImpl);
}

void InitDefaultsIndexResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::braft::_IndexResponse_default_instance_;
    new (ptr) ::braft::IndexResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::braft::IndexResponse::InitAsDefaultInstance();
}

void InitDefaultsIndexResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIndexResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::IndexRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::IndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::IndexResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::braft::IndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::braft::IndexRequest)},
  { 5, 10, sizeof(::braft::IndexResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_IndexRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::braft::_IndexResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "braft/builtin_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033braft/builtin_service.proto\022\005braft\"\016\n\014"
      "IndexRequest\"\017\n\rIndexResponse2H\n\traft_st"
      "at\022;\n\016default_method\022\023.braft.IndexReques"
      "t\032\024.braft.IndexResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/builtin_service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_braft_2fbuiltin_5fservice_2eproto
namespace braft {

// ===================================================================

void IndexRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexRequest::IndexRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fbuiltin_5fservice_2eproto::InitDefaultsIndexRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.IndexRequest)
}
IndexRequest::IndexRequest(const IndexRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:braft.IndexRequest)
}

void IndexRequest::SharedCtor() {
  _cached_size_ = 0;
}

IndexRequest::~IndexRequest() {
  // @@protoc_insertion_point(destructor:braft.IndexRequest)
  SharedDtor();
}

void IndexRequest::SharedDtor() {
}

void IndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexRequest::descriptor() {
  ::protobuf_braft_2fbuiltin_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fbuiltin_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexRequest& IndexRequest::default_instance() {
  ::protobuf_braft_2fbuiltin_5fservice_2eproto::InitDefaultsIndexRequest();
  return *internal_default_instance();
}

IndexRequest* IndexRequest::New(::google::protobuf::Arena* arena) const {
  IndexRequest* n = new IndexRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.IndexRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.IndexRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:braft.IndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.IndexRequest)
  return false;
#undef DO_
}

void IndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.IndexRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.IndexRequest)
}

::google::protobuf::uint8* IndexRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.IndexRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.IndexRequest)
  return target;
}

size_t IndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.IndexRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.IndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.IndexRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.IndexRequest)
    MergeFrom(*source);
  }
}

void IndexRequest::MergeFrom(const IndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.IndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.IndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexRequest::CopyFrom(const IndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.IndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRequest::IsInitialized() const {
  return true;
}

void IndexRequest::Swap(IndexRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexRequest::InternalSwap(IndexRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexRequest::GetMetadata() const {
  protobuf_braft_2fbuiltin_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fbuiltin_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexResponse::IndexResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_braft_2fbuiltin_5fservice_2eproto::InitDefaultsIndexResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.IndexResponse)
}
IndexResponse::IndexResponse(const IndexResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:braft.IndexResponse)
}

void IndexResponse::SharedCtor() {
  _cached_size_ = 0;
}

IndexResponse::~IndexResponse() {
  // @@protoc_insertion_point(destructor:braft.IndexResponse)
  SharedDtor();
}

void IndexResponse::SharedDtor() {
}

void IndexResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexResponse::descriptor() {
  ::protobuf_braft_2fbuiltin_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fbuiltin_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexResponse& IndexResponse::default_instance() {
  ::protobuf_braft_2fbuiltin_5fservice_2eproto::InitDefaultsIndexResponse();
  return *internal_default_instance();
}

IndexResponse* IndexResponse::New(::google::protobuf::Arena* arena) const {
  IndexResponse* n = new IndexResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:braft.IndexResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.IndexResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:braft.IndexResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.IndexResponse)
  return false;
#undef DO_
}

void IndexResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.IndexResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.IndexResponse)
}

::google::protobuf::uint8* IndexResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:braft.IndexResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.IndexResponse)
  return target;
}

size_t IndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:braft.IndexResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:braft.IndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:braft.IndexResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:braft.IndexResponse)
    MergeFrom(*source);
  }
}

void IndexResponse::MergeFrom(const IndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:braft.IndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IndexResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:braft.IndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexResponse::CopyFrom(const IndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:braft.IndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexResponse::IsInitialized() const {
  return true;
}

void IndexResponse::Swap(IndexResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexResponse::InternalSwap(IndexResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexResponse::GetMetadata() const {
  protobuf_braft_2fbuiltin_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_braft_2fbuiltin_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

raft_stat::~raft_stat() {}

const ::google::protobuf::ServiceDescriptor* raft_stat::descriptor() {
  protobuf_braft_2fbuiltin_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_braft_2fbuiltin_5fservice_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* raft_stat::GetDescriptor() {
  return descriptor();
}

void raft_stat::default_method(::google::protobuf::RpcController* controller,
                         const ::braft::IndexRequest*,
                         ::braft::IndexResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void raft_stat::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_braft_2fbuiltin_5fservice_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::braft::IndexRequest*>(request),
             ::google::protobuf::down_cast< ::braft::IndexResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& raft_stat::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::IndexRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& raft_stat::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::IndexResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

raft_stat_Stub::raft_stat_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
raft_stat_Stub::raft_stat_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
raft_stat_Stub::~raft_stat_Stub() {
  if (owns_channel_) delete channel_;
}

void raft_stat_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::braft::IndexRequest* request,
                              ::braft::IndexResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace braft

// @@protoc_insertion_point(global_scope)
