class BiodirectPopen() : public ErrorCup {
public:
  BiodirectPopen();
  ~BiodirectPopen();

  bool popen(const char *cmd, const char *mode);
  void pclose();

  int readOutput(char *, size_t);
  int getWriteFd() const;
  int getReadFd() const;

private:
  // read from child stdout to invoker.
  int rd_from_child_fd[2];
  // write from invoker to child stdin.
  int wt_to_child_fd[2];
};

bool BiodirectPopen::popen(const char *cmd, const char *mode) {
  // create 2 pipes, respectively to different directions.
  // read from child stdout to invoker.
  // write from invoker to child stdin.
  if ((pipe(rd_from_child_fd) != 0) || 
      (pipe(wt_to_child_fd) != 0)) {
    setErr("pipe() failed, errno: %d, errmsg: %s\n", errno, strerror(errno));
    return false;
  }

  pid_t pid = fork();
  switch(pid){
    case -1:
      break;
    case 0:
      /* child */
    
    default:
      /* parent */

  }



}
